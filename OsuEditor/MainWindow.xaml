<ctrls:MetroWindow x:Class="OsuEditor.MainWindow"
                   xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                   xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                   xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                   xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                   xmlns:ctrls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
                   xmlns:mdi="clr-namespace:WPF.MDI;assembly=WPF.MDI"
                   xmlns:custom="clr-namespace:OsuEditor.Controls"
                   xmlns:sys="clr-namespace:System;assembly=mscorlib"
                   xmlns:models="clr-namespace:OsuEditor.Models"
                   xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                   mc:Ignorable="d"
                   Title="Osu! Editor" Height="798" Width="1360" TitleCharacterCasing="Normal"
                   Loaded="MainWindow_OnLoaded" ResizeMode="NoResize" WindowStartupLocation="CenterScreen">
    <ctrls:MetroWindow.Resources>
        <Style TargetType="ListViewItem" BasedOn="{StaticResource {x:Type ListViewItem}}">
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
        </Style>
    </ctrls:MetroWindow.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="105"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="30"/>
        </Grid.RowDefinitions>
        <StackPanel Grid.Row="0" Orientation="Horizontal" VerticalAlignment="Top">
            <Grid x:Name="HeaderGrid"
                  Width="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type StackPanel}},Path=ActualWidth}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="339.5"/>
                </Grid.ColumnDefinitions>
                <Grid Grid.Column="0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="40"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <StackPanel Grid.Column="0" Orientation="Vertical">
                        <Button ToolTip="Increase Timeline Zoom" HorizontalAlignment="Center" Height="30"
                                Width="30" Margin="0,20,0,0" Style="{DynamicResource MetroCircleButtonStyle}"
                                Click="ZoomIn_OnClick">
                            <Rectangle Width="11" Height="11" Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
                                <Rectangle.OpacityMask>
                                    <VisualBrush Stretch="Uniform" Visual="{StaticResource appbar_add}"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                        </Button>
                        <Button ToolTip="Decrease Timeline Zoom" HorizontalAlignment="Center" Height="30"
                                Width="30" Margin="0,5,0,0" Style="{DynamicResource MetroCircleButtonStyle}"
                                Click="ZoomOut_OnClick">
                            <Rectangle Width="11" Height="11" Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
                                <Rectangle.OpacityMask>
                                    <VisualBrush Stretch="Uniform" Visual="{StaticResource appbar_minus}"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                        </Button>
                    </StackPanel>
                    <custom:Timeline Grid.Column="1" x:Name="HeaderTimeline" HorizontalAlignment="Left"
                                     Zoom="10.0" CurrentValue="0"/>
                </Grid>
                <StackPanel Grid.Column="1" Orientation="Vertical">
                    <Label Content="Beat Snap Divisor :" FontSize="25"/>
                    <StackPanel Orientation="Horizontal" Margin="0,15,0,0" Height="30">
                        <Slider Width="280" Height="30" Margin="0,-5,0,0" IsTabStop="False" Minimum="0" Maximum="16" Style="{StaticResource BeatDivisorSlider}"
                                Value="{Binding CurrentMap.Edit.BeatDivisor, Converter={StaticResource BeatSnapToSliderConverter}}"
                                IsSnapToTickEnabled="True" Ticks="0, 2, 3, 4, 6, 8, 12, 16">
                            <Slider.LayoutTransform>
                                <ScaleTransform ScaleY="1.6" CenterX="15" CenterY="15"/>
                            </Slider.LayoutTransform>
                        </Slider>
                        <Label x:Name="BeatLabel" Content="{Binding CurrentMap.Edit.BeatDivisor, Converter={StaticResource SnapTextConverter}}" Margin="5,-8,0,0" FontSize="20"/>
                    </StackPanel>
                </StackPanel>
            </Grid>
        </StackPanel>
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1.05*"/>
                <ColumnDefinition Width="4*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid Grid.Column="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <ListView Grid.Row="0" ItemsSource="{Binding TimingMarks}" SelectedItem="{Binding CurrentTiming}" ScrollViewer.VerticalScrollBarVisibility="Hidden">
                    <ListView.View>
                        <GridView>
                            <GridView.ColumnHeaderContainerStyle>
                                <Style TargetType="{x:Type GridViewColumnHeader}" BasedOn="{StaticResource {x:Type GridViewColumnHeader}}">
                                    <Setter Property="ctrls:ControlsHelper.ContentCharacterCasing" Value="Normal"/>
                                    <Setter Property="IsHitTestVisible" Value="False"/>
                                    <Setter Property="Margin" Value="0"/>
                                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                </Style>
                            </GridView.ColumnHeaderContainerStyle>
                            <GridViewColumn Header="Offset" Width="75">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate DataType="{x:Type models:TimingMark}">
                                        <Grid HorizontalAlignment="Stretch" Margin="-15,-4,-18,-4">
                                            <Grid.Background>
                                                <Binding Path="Kiai" Converter="{StaticResource BooleanToBackgroundConverter}">
                                                    <Binding.ConverterParameter>
                                                        <x:Array Type="Brush">
                                                            <Brush>#FFB732</Brush>
                                                            <Brush>Transparent</Brush>
                                                        </x:Array>
                                                    </Binding.ConverterParameter>
                                                </Binding>
                                            </Grid.Background>
                                            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Margin="10,4,10,4"
                                                       Text="{Binding Offset, Converter={StaticResource MillisecondsConverter}}"
                                                       TextDecorations="{Binding NewBase, Converter={StaticResource BooleanToDecorationConverter}}">
                                                <TextBlock.Foreground>
                                                    <Binding Path="Kiai" Converter="{StaticResource BooleanToBackgroundConverter}">
                                                        <Binding.ConverterParameter>
                                                            <x:Array Type="Brush">
                                                                <Brush>Black</Brush>
                                                                <Brush>White</Brush>
                                                            </x:Array>
                                                        </Binding.ConverterParameter>
                                                    </Binding>
                                                </TextBlock.Foreground>
                                            </TextBlock>
                                        </Grid>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn Header="BPM" DisplayMemberBinding="{Binding Bpm}" Width="40"/>
                            <GridViewColumn Header="Rate" DisplayMemberBinding="{Binding SpeedRate, Converter={StaticResource SpeedRateConverter}}" Width="40"/>
                            <GridViewColumn Header="Notes" Width="78">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate DataType="{x:Type models:TimingMark}">
                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                                            <Border CornerRadius="50" Width="15" Height="15" BorderBrush="White" BorderThickness="1.5" Padding="0" Margin="0,0,2,0"
                                                        Visibility="{Binding BookMarkChange, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=Hidden}">
                                                <TextBlock HorizontalAlignment="Center" Text="B" FontSize="9" Margin="0,0,0,1"/>
                                            </Border>
                                            <Border CornerRadius="50" Width="15" Height="15" BorderBrush="White" BorderThickness="1.5" Padding="0" Margin="0,0,2,0"
                                                        Visibility="{Binding HitSoundChange, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=Hidden}">
                                                <TextBlock HorizontalAlignment="Center" Text="H" FontSize="9" Margin="0,0,0,1"/>
                                            </Border>
                                            <Border CornerRadius="50" Width="15" Height="15" BorderBrush="White" BorderThickness="1.5" Padding="0" Margin="0,0,2,0"
                                                        Visibility="{Binding MeasureChange, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=Hidden}">
                                                <TextBlock HorizontalAlignment="Center" Text="M" FontSize="9" Margin="0,0,0,1"/>
                                            </Border>
                                            <Border CornerRadius="50" Width="15" Height="15" BorderBrush="White" BorderThickness="1.5" Padding="0"
                                                        Visibility="{Binding Preview, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=Hidden}">
                                                <TextBlock HorizontalAlignment="Center" Text="P" FontSize="9" Margin="0,0,0,1"/>
                                            </Border>
                                        </StackPanel>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                        </GridView>
                    </ListView.View>
                </ListView>
                <StackPanel Grid.Row="1" Orientation="Vertical" Margin="0,5,0,0">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Button Grid.Column="0" Content="Add" ctrls:ControlsHelper.ContentCharacterCasing="Normal" Focusable="False" Command="{Binding AddTimingMarkCommand}"/>
                        <Button Grid.Column="1" Content="Delete" ctrls:ControlsHelper.ContentCharacterCasing="Normal" Focusable="False" Command="{Binding DeleteTimingMarkCommand}"/>
                    </Grid>
                    <GroupBox Header="Timing Point Property" Style="{x:Null}" BorderThickness="1" Margin="0,5,0,0">
                        <StackPanel Orientation="Vertical" Margin="5">
                            <StackPanel Orientation="Horizontal" Margin="0,0,0,5">
                                <Label Content="Offset:" Margin="-5,0,0,0"/>
                                <TextBox x:Name="OffsetTextBox" Width="65" HorizontalContentAlignment="Right" Height="20" MinHeight="20" Padding="-2" 
                                         Text="{Binding CurrentTiming.Offset, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                         PreviewTextInput="IntTextBox_OnPreviewTextInput" GotFocus="OffsetTextBox_OnGotFocus" LostFocus="OffsetTextBox_OnLostFocus"/>
                                <Popup PlacementTarget="{Binding ElementName=OffsetTextBox}" IsOpen="{Binding OffsetErrorOccurred}"
                                       PopupAnimation="Fade" AllowsTransparency="True">
                                    <Border Margin="1" BorderBrush="Red" BorderThickness="1">
                                        <TextBlock Text="This offset already has a timing point." Background="Red" Foreground="White"/>
                                    </Border>
                                </Popup>
                                <Button Content="Use Current Time" ctrls:ControlsHelper.ContentCharacterCasing="Normal" Margin="15,0,0,0" Focusable="False" BorderThickness="1"
                                        Command="{Binding UseCurrentTimeCommand}"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Margin="0,0,0,5">
                                <CheckBox x:Name="MeasureCheckBox" Content="Measure" BorderThickness="1" Focusable="False" IsChecked="{Binding CurrentTiming.MeasureChange}"/>
                                <TextBox Width="40" Margin="30,0,0,0" HorizontalContentAlignment="Right" Height="20" MinHeight="20" Padding="-2"
                                         IsReadOnly="{Binding ElementName=MeasureCheckBox, Path=IsChecked, Converter={StaticResource NotConverter}}"
                                         Text="{Binding CurrentTiming.Measure}" PreviewTextInput="IntTextBox_OnPreviewTextInput"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Margin="0,0,0,5">
                                <CheckBox x:Name="SpeedCheckBox" Content="Speed Change" BorderThickness="1" Focusable="False" IsChecked="{Binding CurrentTiming.SpeedChange}"/>
                                <CheckBox x:Name="NewBaseCheckBox" Content="New Base" BorderThickness="1" Focusable="False" Margin="15,0,0,0" IsChecked="{Binding CurrentTiming.NewBase}"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Margin="20,0,0,5">
                                <Label Content="BPM:"/>
                                <TextBox x:Name="BpmTextBox" Width="50" Margin="5,0,0,0"
                                         IsReadOnly="{Binding ElementName=SpeedCheckBox, Path=IsChecked, Converter={StaticResource NotConverter}}"
                                         HorizontalContentAlignment="Right" Height="20" MinHeight="20" Padding="-2" Text="{Binding CurrentTiming.Bpm}"
                                         PreviewTextInput="IntTextBox_OnPreviewTextInput" LostFocus="BpmTextBox_OnLostFocus" />
                                <TextBox Width="50" Margin="25,0,0,0" IsReadOnly="{Binding ElementName=SpeedCheckBox, Path=IsChecked, Converter={StaticResource NotConverter}}"
                                         HorizontalContentAlignment="Right" Height="20" MinHeight="20" Padding="-2" Text="{Binding CurrentTiming.SpeedRate}"
                                         PreviewTextInput="IntTextBox_OnPreviewTextInput"/>
                                <Label Content="%"/>
                            </StackPanel>
                            <CheckBox Content="Hitsound Change" Margin="0,0,0,5" BorderThickness="1" Focusable="False" IsChecked="{Binding CurrentTiming.HitSoundChange}"/>
                            <CheckBox Content="Preview Point" Margin="0,0,0,5" BorderThickness="1" Focusable="False" IsChecked="{Binding CurrentTiming.Preview}">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Checked">
                                        <i:InvokeCommandAction Command="{Binding PreviewCheckedCommand}"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </CheckBox>
                            <CheckBox x:Name="BookmarkCheckBox" Content="Bookmark Point" Margin="0,0,0,5" BorderThickness="1" Focusable="False"
                                      IsChecked="{Binding CurrentTiming.BookMarkChange}"/>
                            <StackPanel Orientation="Horizontal" Margin="20,0,0,5"
                                        Visibility="{Binding ElementName=BookmarkCheckBox, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}">
                                <Label Content="Note: "/>
                                <TextBox Width="140" HorizontalContentAlignment="Left" Height="20" MinHeight="20" Padding="-2"/>
                            </StackPanel>
                            <ToggleButton Margin="10,0,10,0" BorderThickness="1" Focusable="False" IsChecked="{Binding CurrentTiming.Kiai}">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
                                        <Style.Triggers>
                                            <Trigger Property="IsChecked" Value="False">
                                                <Setter Property="Content" Value="Kiai Off"/>
                                            </Trigger>
                                            <Trigger Property="IsChecked" Value="True">
                                                <Setter Property="Background" Value="#FFB732"/>
                                                <Setter Property="Content" Value="Kiai On"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                        </StackPanel>
                    </GroupBox>
                </StackPanel>
            </Grid>
            <mdi:MdiContainer Grid.Column="1" x:Name="PatternMdi" Theme="Luna" Background="Transparent"/>
            <ScrollViewer Grid.Column="2">
                <StackPanel Orientation="Vertical">
                    <Expander Header="Metadata" VerticalAlignment="Top" Margin="0,20,5,0">
                        <StackPanel Orientation="Vertical" VerticalAlignment="Top">
                            <StackPanel Orientation="Horizontal">
                                <Label Content="Artist" Width="70"/>
                                <TextBox Width="125" Text="{Binding CurrentMap.Meta.ArtistUnicode, UpdateSourceTrigger=PropertyChanged}"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <Label Content="> Romanized" FontSize="9" Width="70"/>
                                <TextBox Width="125" Text="{Binding CurrentMap.Meta.Artist, UpdateSourceTrigger=PropertyChanged}"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <Label Content="Title" Width="70"/>
                                <TextBox Width="125" Text="{Binding CurrentMap.Meta.TitleUnicode, UpdateSourceTrigger=PropertyChanged}"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <Label Content="> Romanized" FontSize="9" Width="70"/>
                                <TextBox Width="125" Text="{Binding CurrentMap.Meta.Title, UpdateSourceTrigger=PropertyChanged}"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <Label Content="Creator" Width="70"/>
                                <TextBox Width="125" Text="{Binding CurrentMap.Meta.Creator, UpdateSourceTrigger=PropertyChanged}"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <Label Content="Source" Width="70"/>
                                <TextBox Width="125" Text="{Binding CurrentMap.Meta.Source, UpdateSourceTrigger=PropertyChanged}"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <Label Content="Tag" Width="70"/>
                                <TextBox Width="125" Text="{Binding CurrentMap.Meta.Tags, Converter={StaticResource ListToStringConverter}, UpdateSourceTrigger=PropertyChanged}"/>
                            </StackPanel>
                            <Expander Header="Countdown" Margin="5" ctrls:ControlsHelper.ContentCharacterCasing="Normal" BorderThickness="1">
                                <StackPanel Orientation="Vertical">
                                    <CheckBox Content="Enable countdown" Margin="0,0,0,5" Focusable="False"/>
                                    <StackPanel Orientation="Horizontal" Margin="0,0,0,5">
                                        <Label Content="Speed:" Margin="0,-5,5,0"/>
                                        <StackPanel Orientation="Vertical">
                                            <RadioButton GroupName="CountdownSpeedGroup" Content="Half" Focusable="False" BorderThickness="1" Margin="0,0,0,5"/>
                                            <RadioButton GroupName="CountdownSpeedGroup" Content="Normal" Focusable="False" BorderThickness="1" Margin="0,0,0,5"/>
                                            <RadioButton GroupName="CountdownSpeedGroup" Content="Double" Focusable="False" BorderThickness="1"/>
                                        </StackPanel>
                                    </StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <Label Content="Offset:" Margin="0,0,5,0"/>
                                        <ctrls:NumericUpDown BorderThickness="1" Interval="1" Minimum="0" Maximum="5" InterceptManualEnter="False"/>
                                    </StackPanel>
                                </StackPanel>
                            </Expander>
                            <Expander Header="Misc. Toggles" Margin="5" ctrls:ControlsHelper.ContentCharacterCasing="Normal">
                                <StackPanel Orientation="Vertical">
                                    <CheckBox Content="Widescreen Support" BorderThickness="1" Focusable="False" Margin="0,0,0,5" IsChecked="{Binding CurrentMap.Gen.WidescreenStoryboard, UpdateSourceTrigger=PropertyChanged}"/>
                                    <CheckBox Content="SB over combo fire" ToolTip="Display storyboard in front of combo fire" BorderThickness="1" Focusable="False" Margin="0,0,0,5"/>
                                    <CheckBox Content="Epilepsy warning" ToolTip="Display epilepsy warning(storyboard has quick strobing)" BorderThickness="1" Focusable="False" Margin="0,0,0,5"/>
                                    <CheckBox Content="Letterbox during breaks" BorderThickness="1" Focusable="False" IsChecked="{Binding CurrentMap.Gen.LetterboxInBreaks, UpdateSourceTrigger=PropertyChanged}"/>
                                </StackPanel>
                            </Expander>
                        </StackPanel>
                    </Expander>
                    <Expander Header="Properties" VerticalAlignment="Top" Margin="0,20,5,0">
                        <StackPanel Orientation="Vertical" VerticalAlignment="Top">
                            <StackPanel Orientation="Horizontal">
                                <Label Content="Diff Name" Width="70"/>
                                <TextBox Width="125" Text="{Binding CurrentMap.Meta.Version, UpdateSourceTrigger=PropertyChanged}"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <Label Content="HP" Width="30"/>
                                <Slider Width="125" Margin="5,5,0,0" Minimum="0.0" Maximum="10.0" TickFrequency="0.1" TickPlacement="None" IsSnapToTickEnabled="True"
                                        Value="{Binding CurrentMap.Diff.HPDrainRate}"/>
                                <TextBox Width="30" Margin="5,0,0,0" PreviewTextInput="DoubleTextBox_OnPreviewTextInput">
                                    <TextBox.Text>
                                        <Binding Path="CurrentMap.Diff.HPDrainRate" Converter="{StaticResource DoubleToStringConverter}">
                                            <Binding.ConverterParameter>
                                                <x:Array Type="sys:Double">
                                                    <sys:Double>0.0</sys:Double>
                                                    <sys:Double>10.0</sys:Double>
                                                </x:Array>
                                            </Binding.ConverterParameter>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" 
                                        Visibility="{Binding CurrentMap.Gen.Mode, Converter={StaticResource PlayModeToVisibilityConverter}, ConverterParameter=4, IsAsync=True}">
                                <Label Content="CS" Width="30"/>
                                <Slider Width="125" Margin="5,5,0,0" Minimum="2.0" Maximum="7.0" TickFrequency="0.1" TickPlacement="None" IsSnapToTickEnabled="True"
                                        Value="{Binding CurrentMap.Diff.CircleSize}"/>
                                <TextBox Width="30" Margin="5,0,0,0" PreviewTextInput="DoubleTextBox_OnPreviewTextInput">
                                    <TextBox.Text>
                                        <Binding Path="CurrentMap.Diff.CircleSize" Converter="{StaticResource DoubleToStringConverter}">
                                            <Binding.ConverterParameter>
                                                <x:Array Type="sys:Double">
                                                    <sys:Double>2.0</sys:Double>
                                                    <sys:Double>7.0</sys:Double>
                                                </x:Array>
                                            </Binding.ConverterParameter>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <Label Content="OD" Width="30"/>
                                <Slider Width="125" Margin="5,5,0,0" Minimum="0.0" Maximum="10.0" TickFrequency="0.1" TickPlacement="None" IsSnapToTickEnabled="True"
                                        Value="{Binding CurrentMap.Diff.OverallDifficulty}"/>
                                <TextBox Width="30" Margin="5,0,0,0" PreviewTextInput="DoubleTextBox_OnPreviewTextInput">
                                    <TextBox.Text>
                                        <Binding Path="CurrentMap.Diff.OverallDifficulty" Converter="{StaticResource DoubleToStringConverter}">
                                            <Binding.ConverterParameter>
                                                <x:Array Type="sys:Double">
                                                    <sys:Double>0.0</sys:Double>
                                                    <sys:Double>10.0</sys:Double>
                                                </x:Array>
                                            </Binding.ConverterParameter>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" 
                                        Visibility="{Binding CurrentMap.Gen.Mode, Converter={StaticResource PlayModeToVisibilityConverter}, ConverterParameter=4, IsAsync=True}">
                                <Label Content="AR" Width="30"/>
                                <Slider Width="125" Margin="5,5,0,0" Minimum="0.0" Maximum="10.0" TickFrequency="0.1" TickPlacement="None" IsSnapToTickEnabled="True"
                                        Value="{Binding CurrentMap.Diff.ApproachRate}"/>
                                <TextBox Width="30" Margin="5,0,0,0" PreviewTextInput="DoubleTextBox_OnPreviewTextInput">
                                    <TextBox.Text>
                                        <Binding Path="CurrentMap.Diff.ApproachRate" Converter="{StaticResource DoubleToStringConverter}">
                                            <Binding.ConverterParameter>
                                                <x:Array Type="sys:Double">
                                                    <sys:Double>0.0</sys:Double>
                                                    <sys:Double>10.0</sys:Double>
                                                </x:Array>
                                            </Binding.ConverterParameter>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                            </StackPanel>
                            <Expander Header="Audio" Margin="5" ctrls:ControlsHelper.ContentCharacterCasing="Normal">
                                <StackPanel Orientation="Vertical">
                                    <GroupBox Header="Default sample set" Style="{x:Null}" BorderThickness="1">
                                        <ListBox ItemsSource="{Binding CurrentTiming.HitSound, Converter={StaticResource EnumToCollectionConverter}, Mode=OneTime}"
                                                 SelectedValue="{Binding CurrentTiming.HitSound}" SelectedValuePath="Item1" DisplayMemberPath="Item2"/>
                                    </GroupBox>
                                    <CheckBox Content="Enable custom overrides" BorderThickness="1" Focusable="False" Margin="0,5,0,0"/>
                                    <Label Content="Sample volume:" Margin="0,5,0,0"/>
                                    <StackPanel Orientation="Horizontal">
                                        <Slider Width="140" Margin="0,5,0,0" Minimum="0" Maximum="100" TickFrequency="1" TickPlacement="None" IsSnapToTickEnabled="True"
                                                Value="{Binding CurrentTiming.Volume}"/>
                                        <TextBox Width="30" Margin="5,0,0,0" PreviewTextInput="IntTextBox_OnPreviewTextInput">
                                            <TextBox.Text>
                                                <Binding Path="CurrentTiming.Volume" Converter="{StaticResource IntToStringConverter}">
                                                    <Binding.ConverterParameter>
                                                        <x:Array Type="sys:Int32">
                                                            <sys:Int32>0</sys:Int32>
                                                            <sys:Int32>100</sys:Int32>
                                                        </x:Array>
                                                    </Binding.ConverterParameter>
                                                </Binding>
                                            </TextBox.Text>
                                        </TextBox>
                                    </StackPanel>
                                </StackPanel>
                            </Expander>
                            <Expander Header="Colors" Margin="5" ctrls:ControlsHelper.ContentCharacterCasing="Normal"
                                      Visibility="{Binding CurrentMap.Gen.Mode, Converter={StaticResource PlayModeToVisibilityConverter}, ConverterParameter=0, IsAsync=True}">
                                <StackPanel Orientation="Vertical">
                                    <CheckBox Content="Enable custom colors" BorderThickness="1" Focusable="False"/>
                                    <ListBox Margin="0,5,0,0">
                                        <ListBoxItem Content="Combo1" HorizontalContentAlignment="Center" Background="Green"/>
                                        <ListBoxItem Content="Combo2" HorizontalContentAlignment="Center" Background="Blue"/>
                                        <ListBoxItem Content="Combo3" HorizontalContentAlignment="Center" Background="Red"/>
                                        <ListBoxItem Content="Combo4" HorizontalContentAlignment="Center" Background="Orange"/>
                                    </ListBox>
                                    <Button Content="Background Color" Focusable="False" BorderThickness="0" HorizontalContentAlignment="Center" Background="Gray"
                                            ctrls:ControlsHelper.CornerRadius="0"/>
                                </StackPanel>
                            </Expander>
                            <StackPanel Orientation="Horizontal" 
                                        Visibility="{Binding CurrentMap.Gen.Mode, Converter={StaticResource PlayModeToVisibilityConverter}, ConverterParameter=0, IsAsync=True}">
                                <Label Content="Stack Leniency"/>
                                <Slider Width="100" Margin="5,5,0,0"/>
                            </StackPanel>
                        </StackPanel>
                    </Expander>
                    <Expander Header="Other Difficulties" Margin="0,20,5,0" VerticalAlignment="Top" IsExpanded="True">
                        <StackPanel Orientation="Vertical">
                            <ListBox x:Name="DiffListBox" ItemsSource="{Binding Diffs}" SelectedItem="{Binding CurrentDiff}"
                                     MouseDoubleClick="DiffListBox_OnMouseDoubleClick">
                                <ListBox.ContextMenu>
                                    <ContextMenu BorderThickness="1">
                                        <MenuItem Header="Open" Command="{Binding OpenDifficultyCommand}"/>
                                        <MenuItem Header="Rename" Command="{Binding RenameDifficultyCommand}"/>
                                        <MenuItem Header="Delete" Command="{Binding DeleteDifficultyCommand}"/>
                                    </ContextMenu>
                                </ListBox.ContextMenu>
                                <ListBox.ItemTemplate>
                                    <DataTemplate DataType="{x:Type models:DiffVersion}">
                                        <TextBlock Text="{Binding DiffName}" FontWeight="{Binding Activated, Converter={StaticResource BooleanToFontWeightConverter}}"/>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                            <Button Content="Add new Difficulty" HorizontalContentAlignment="Left" Margin="0,5,0,0" Focusable="False" BorderThickness="0"
                                    ctrls:ControlsHelper.CornerRadius="0" ctrls:ControlsHelper.ContentCharacterCasing="Normal"
                                    Command="{Binding AddDifficultyCommand}"/>
                        </StackPanel>
                    </Expander>
                    <Button Content="        Initial Settings" Margin="0,20,5,0" HorizontalContentAlignment="Left" Background="SlateGray"
                            ctrls:ControlsHelper.CornerRadius="0" Focusable="False" BorderThickness="0" Command="{Binding InitialCommand}"/>
                    <Button Content="        Editor Settings" Margin="0,20,5,0" HorizontalContentAlignment="Left" Background="SlateGray"
                            ctrls:ControlsHelper.CornerRadius="0" Focusable="False" BorderThickness="0" Command="{Binding EditorCommand}"/>
                </StackPanel>
            </ScrollViewer>
        </Grid>
        <StackPanel Grid.Row="2" Height="30" Orientation="Horizontal">
            <Label Width="80" Content="{Binding CurrentPosition, Converter={StaticResource MillisecondsConverter}}"
                   FontSize="16" HorizontalContentAlignment="Center" Margin="5,0,0,0"/>
            <custom:MusicBar x:Name="MainMusicBar" Height="30" Width="848" Margin="10,6,10,0" HorizontalAlignment="Left" IsTabStop="False" IsMoveToPointEnabled="True"
                             Minimum="0" Maximum="{Binding SongLength}" Value="{Binding CurrentPosition}" Style="{StaticResource MusicBarSlider}"
                             ValueChanged="MainMusicBar_OnValueChanged"/>
            <Button Width="30" Margin="0" Padding="0" IsTabStop="False" Focusable="False" BorderThickness="0" ctrls:ControlsHelper.CornerRadius="0"
                    Command="{Binding PlayCommand}">
                <Rectangle Width="15" Height="15" Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
                    <Rectangle.OpacityMask>
                        <VisualBrush Stretch="Uniform" Visual="{StaticResource appbar_control_play}"/>
                    </Rectangle.OpacityMask>
                </Rectangle>
            </Button>
            <Button Width="30" Margin="0" Padding="0" IsTabStop="False" Focusable="False" BorderThickness="0" ctrls:ControlsHelper.CornerRadius="0"
                    Command="{Binding PauseCommand}">
                <Rectangle Width="15" Height="15" Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
                    <Rectangle.OpacityMask>
                        <VisualBrush Stretch="Uniform" Visual="{StaticResource appbar_control_pause}"/>
                    </Rectangle.OpacityMask>
                </Rectangle>
            </Button>
            <Button Width="30" Margin="0" Padding="0" IsTabStop="False" Focusable="False" BorderThickness="0" ctrls:ControlsHelper.CornerRadius="0"
                    Command="{Binding StopCommand}">
                <Rectangle Width="15" Height="15" Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
                    <Rectangle.OpacityMask>
                        <VisualBrush Stretch="Uniform" Visual="{StaticResource appbar_control_stop}"/>
                    </Rectangle.OpacityMask>
                </Rectangle>
            </Button>
            <Button Margin="0" Padding="0" IsTabStop="False" Focusable="False" BorderThickness="0" ctrls:ControlsHelper.CornerRadius="0"
                    Command="{Binding TestCommand}">
                <StackPanel Margin="5,0,0,0" Orientation="Horizontal" Width="60">
                    <Rectangle Width="15" Height="15" Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
                        <Rectangle.OpacityMask>
                            <VisualBrush Stretch="Uniform" Visual="{StaticResource appbar_control_play}"/>
                        </Rectangle.OpacityMask>
                    </Rectangle>
                    <TextBlock Margin="5,0,0,0" Text="Test" FontSize="15"></TextBlock>
                </StackPanel>
            </Button>
            <Label Margin="5,0,0,0" Content="Playback Rate:" FontSize="15" FontWeight="Bold"/>
            <ctrls:NumericUpDown x:Name="PlayRateUpDown" BorderThickness="0" Margin="7,0,0,0" Width="120" Height="30" FontSize="15" FontWeight="Bold" UpDownButtonsWidth="30"
                                 NumericInputMode="Numbers" InterceptArrowKeys="False" InterceptMouseWheel="False" InterceptManualEnter="False"
                                 Value="{Binding PlayRate, UpdateSourceTrigger=PropertyChanged}" Minimum="5" Maximum="150" Interval="5" StringFormat="{}{0:N0} %  "/>
        </StackPanel>
    </Grid>
</ctrls:MetroWindow>
